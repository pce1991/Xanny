* Tasks
** TEXTS
*** TO DO
**** TODO read maps from files
**** TODO allow optional index of length 5? use nesting?
**** TODO search for phrase in one or more texts
***** TODO search by "contains", grammer, subject
**** TODO deal with texts containing a lot of junk, like PDFs
     detect repeated lines like title/author headers
**** TODO analyze text to determine how to map
     check repeating patterns that aren't sentences. check justification
**** TODO Build UI for navigating/comparing.
     come up with a lot of shortcuts. 
     use printf or format for console comparison. Line things up like this.
	 xlansaho htaoe uh h atoheun ha saos oennte
	 htnao hteno assssr,c.p mntsntogr ";htneoas"	htneoas ahhoh ehho ah o
	 aoeuhnaoseunonuh ao a o b sabs ;r u baoeu	htnasoeutnhaoesnuthaoeu
    so that the liked text begins where it's referenced, then continues through a certain point, so you could say you only want the context of the line, or the rest of the chapter.
**** TODO map websters dict
**** TODO word hyphenation/syllabification
     what are the difeerences? use split to get vector of syllables to count.
**** TODO begin using wordnet to find meaning
**** TODO summarize texts
**** TODO Markov generator
    this leads to an advertisement generator. use wordnet! something like 
"you are a attribute." "Be a concept." "intensifier quality"
**** TODO Map Shakespeare
***** first, split up the file into 1 for each play so I dont have to do 5th index. easy way out?
**** TODO add metadata to maps
     things like: section-mapped? line/sentence-based segments.
**** TODO mark data by time, train in chronological order
**** TODO read text to find the proper index count so it isnt static
     might mess with retrieval functions since seg won't asways take same # of args
**** TODO expand map to go by sentence, or generate a new one from regular.
     need for connecting words to definitions or annotations, like in Finnegan's wake.
**** TODO POETRY AID
     Check meter, if it doesn't fit, do replacement like in spelling correction, checking the cost of word replacements that'd make it conform.
     Check for alliteration, shoving how long the sequence is, any breaks like "and" between words. 
     Look up synonyms in wordnet, but double check with webster's? Maybe its only wordnet definitions that are lacksuster, and it'd be interesting to find synonyms that are a closer match psychologically.
**** TODO map multiple translations to the same index, so you have {[0 1 1 1] {:KJV "" :NRSV ""}}
***** texts might have different formatting though.
**** TODO do information extraction for named entities and relations
**** TODO build corpora
     Partially there, just need nice formatting, and to keep track of where it occurred. Down to the word, or just "it occurred in this sentence"
**** TODO Write regex that gives you an expression that solves the two cases you want to match.
**** TODO REGEX dictionary. Give me all the words containing an A, an X, and a G. 
     So useful.
**** TODO  REMOVE CHUNKS
     
*** FOR CONSEDERATION
**** TODO find segments of a text! this migh be easier than the marker method. 
     deal with them as if it were a book.
**** dont clean up a string until that data has been used in all mapping
**** TODO !! write separate functions to go through and map in small steps.
     this would allow for more general mapping, like grabbing all the chapters, or by each word. 
     might involve doing maps like {:vol {:prt {:chap {:seq ["a" "x" "c" "."]}}}} and these words are concatenated along with puntuation to form the whole sequence, adding spaces in between each (make sure to handle -, " and such) and that makes since, since a vec is a seq I think. I can already do this though. how to keep efficient. You should be able to just ask for the 4000th word, and it'll tell you where in the text it is. I need a better way to split up sentences than the tokenizer, it's way too slow (but then again, if the map is saved it might not matter).
**** New map design 
     {:vols {0 {:parts {1 {:title "GEN" :sec {1 {:title "chap 1"} 2 {:title  "chap 2" :contents {1 "In the beginning"}}}}}} 1 {}}}
**** should you be able to get the 10,000th word? Brad suggested it be mapped this way
**** REGEX DICTIONARY
     use re-seq
*** ISSUES
**** "quotes like this" --by me are mapped as two different sentences.
     this sucks because quotes should be considered a whole unit, or at least be contextualized
**** sometimes consecutive linebreaks mean something. dont fight it.
***** this in the case in Finnegan's Wake where each sentence is 1 line apart but paragraphs are 2, parts 3
**** map sentences doesnt combine philoso-phy into one word. 
   
*** TEXTS TO MAP

    Ulysses (what's wrong with current map again? that's right, two lines mark a new part! but there are other occurences where it does not! ugh. wait, that was gutenbergs, another uses ***** which is so much better, sometimes uses fewer to denote a change in character in that one episode.)
    
    Finnegans Wake (remove those copywright chunks between chapters)
    Fairie Queene (strip out the title at top of each page)
    The Divine Comedy (include both translations)

**** Cantebury Tales (unforeseen complication will arise)
     I can use the weird gutenberg one with lots of <2> and experiment with adding footnotes and translations, but do I tie it to line, or associate a new key, which is the word its tied to, thus the sentence contains a key which is linked to a definition.

**** ILLIAD
     Get rid of illustrations with a chunk remover, and modify the start and end matcher to match Uppercase patterns

     it has no "produced by", this was unforeseen; give it its own start.

**** Dictionary
     Just get keys for now to experiment with a regex dictionary.

     Can't use map-text for this

*** 4 things to do <2014-05-17 Sat>
    Map dictionary and build regex
    Remove chunks
    Add translations
    Add title and author to the metadata of map. 
